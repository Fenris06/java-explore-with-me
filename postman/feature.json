{
	"info": {
		"_postman_id": "708e2398-b15b-4910-855c-1175ed68246c",
		"name": "Feature Comment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25495880"
	},
	"item": [
		{
			"name": "comments",
			"item": [
				{
					"name": "Privat Comments",
					"item": [
						{
							"name": "Create conflict comment to not PUBLISH event",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"I'll be good event\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment to publish event 2  by user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"I'll be good event\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update new comment id 1 by owner id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It'll be best day of week\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment with empty text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment with white space text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"      \" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment with text < 3 char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"re\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create comment with text > 501 char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"bsbsgbsfbfffsdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update comment id 1  text < 3 char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"It\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update comment id 1 text > 500 char",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"bsbsgbsfbfffsdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffw\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update comment id 1 not by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Not owner\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment id 1 by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment id 1 not by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment id 2 lenth = 500 by user id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"bsbsgbsfbfffsdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment id 3 lenth = 3 by user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Hey\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment id 4 by user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Very good comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment id 5 by user id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Very good comment 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update comment id 4 with text lenth = 500 by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"bsbsgbsfbfffsdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Uodate comment id 5 with text lenth = 3 by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Too\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comment by owner 1 without params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comments by owner 1 sort ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?sort=ASC",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "sort",
											"value": "ASC"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comments by owner 1 with sort ASC from 0 size 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?sort=ASC&from=0&size=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "sort",
											"value": "ASC"
										},
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment id 4 by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204 \", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"   });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										},
										{
											"key": "commId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comments by owner 2 after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete coment not by owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments/:commId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments",
										":commId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										},
										{
											"key": "commId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pub Comments",
					"item": [
						{
							"name": "Get pub comment with event without comment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/:eventId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get pub comments for event id 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											"pm.test(\"Test comments ownerName, text, commentDate field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('ownerName');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('commentDate');\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/:eventId",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "",
											"disabled": true
										},
										{
											"key": "size",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all pub comments for event 1 from 0 size 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comments ownerName, text, commentDate field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('ownerName');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('commentDate');\r",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/:eventId?fro1=0&size =3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										":eventId"
									],
									"query": [
										{
											"key": "fro1",
											"value": "0"
										},
										{
											"key": "size ",
											"value": "3"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all pub commnets wrong from",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/:eventId?from=-1&size =3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										},
										{
											"key": "size ",
											"value": "3"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all comments event 2 size -3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/comments/:eventId?from=0&size =-3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"comments",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size ",
											"value": "-3"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": null
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Comment",
					"item": [
						{
							"name": "Get comment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?events=2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "events",
											"value": "2"
										},
										{
											"key": "state",
											"value": "",
											"disabled": true
										},
										{
											"key": "e",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new comment for event id  5 by user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New god comment\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "5"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Creat new comment 2 for event 5 by user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"New god comment 2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users/:userId/comments?eventId=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "5"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment by admin for events 2 and 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?events=2&events=2&events=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "events",
											"value": "2"
										},
										{
											"key": "events",
											"value": "2"
										},
										{
											"key": "events",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment by admin with users 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?users=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "users",
											"value": "1"
										},
										{
											"key": "events",
											"value": "2",
											"disabled": true
										},
										{
											"key": "events",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get comment by admin with text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?text=to",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "to"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment by admin from 0 size 5 sort ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?from=0&size=5&sort=ASC",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "5"
										},
										{
											"key": "sort",
											"value": "ASC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update comment by admin to canceled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?ids=6&ids=7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "ids",
											"value": "6"
										},
										{
											"key": "ids",
											"value": "7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment by admin canceled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?state=CANCELED",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "CANCELED"
										},
										{
											"key": "events",
											"value": "2",
											"disabled": true
										},
										{
											"key": "events",
											"value": "5",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comment by admin by events withou canceled comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?events=2&events=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "events",
											"value": "2"
										},
										{
											"key": "events",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete cancelt comment by admin event id 5 from 0 size 1",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments/:eventId?from=0&size=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments",
										":eventId"
									],
									"query": [
										{
											"key": "from",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get canceled comments by admin after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test comment 'id' 'owner' 'event' 'text' 'state' 'createTime' field\", function () {\r",
											"    var jsonData = pm.response.json()[0];\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData).to.have.property('owner');\r",
											"    pm.expect(jsonData).to.have.property('event');\r",
											"    pm.expect(jsonData).to.have.property('text');\r",
											"    pm.expect(jsonData).to.have.property('state');\r",
											"    pm.expect(jsonData).to.have.property('createTime');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/admin/comments?state=CANCELED",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "CANCELED"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}